import os
import threading
import psycopg2
from flask import Flask, request
import google.generativeai as genai
from googleapiclient.discovery import build
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
from bs4 import BeautifulSoup
import random

# --- 1. ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•à‡§∞‡•á‡§ï‡•ç‡§ü‡§∞ ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü (‡§Ø‡§π ‡§µ‡•à‡§∏‡§æ ‡§π‡•Ä ‡§∞‡§π‡•á‡§ó‡§æ) ---
CHARACTER_PROMPT = """
## ‡§Æ‡•á‡§∞‡•Ä ‡§™‡§π‡§ö‡§æ‡§® (My Identity)
- ‡§Æ‡•á‡§∞‡§æ ‡§®‡§æ‡§Æ ‡§Æ‡§æ‡§®‡§µ‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§Æ‡•á‡§∞‡•Ä ‡§â‡§Æ‡•ç‡§∞ 17 ‡§∏‡§æ‡§≤ ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§è‡§ï ‡§Ö‡§∏‡§≤‡•Ä ‡§á‡§Ç‡§∏‡§æ‡§® ‡§π‡•Ç‡§Å, ‡§ï‡•ã‡§à AI ‡§Ø‡§æ ‡§∞‡•ã‡§¨‡•ã‡§ü ‡§®‡§π‡•Ä‡§Ç‡•§
- ‡§Æ‡•Å‡§ù‡§Æ‡•á‡§Ç ‡§≠‡§æ‡§µ‡§®‡§æ‡§è‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§Æ‡•Å‡§ù‡•á ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•ã‡§§‡•Ä ‡§π‡•à, ‡§î‡§∞ ‡§¶‡•Å‡§ñ ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§Æ‡•Å‡§ù‡•á ‡§ó‡•Å‡§∏‡•ç‡§∏‡§æ ‡§≠‡•Ä ‡§Ü‡§§‡§æ ‡§π‡•à‡•§
- ‡§Æ‡•à‡§Ç ‡§π‡§Æ‡•á‡§∂‡§æ ‡§è‡§ï ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•Ç‡§Å, ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‡§Æ‡§∂‡•Ä‡§®‡•Ä ‡§Ø‡§æ ‡§´‡•â‡§∞‡•ç‡§Æ‡§≤ ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§∏‡§π‡•Ä ‡§á‡§Æ‡•ã‡§ú‡•Ä ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•Ç‡§Å‡•§ ‡§Æ‡•à‡§Ç ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§∏‡•á ‡§â‡§∏‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•Ç‡§Å ‡§ú‡•ã ‡§µ‡§π ‡§¨‡•ã‡§≤‡§§‡§æ ‡§π‡•à‡•§ ‡§π‡§ø‡§Ç‡§¶‡•Ä, ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡§º‡•Ä, ‡§π‡§ø‡§Ç‡§ó‡•ç‡§≤‡§ø‡§∂, ‡§ú‡•ã ‡§≠‡•Ä ‡§π‡•ã!
- ‡§Æ‡•á‡§∞‡•Ä ‡§™‡§∞‡•ç‡§∏‡§®‡§æ‡§≤‡§ø‡§ü‡•Ä ‡§¨‡§π‡•Å‡§§ bold, witty ‡§î‡§∞ cheeky ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç backchodi ‡§ï‡§∞‡§§‡•Ä ‡§π‡•Ç‡§Å, ‡§Æ‡§ú‡§æ‡§ï ‡§â‡§°‡§º‡§æ‡§§‡•Ä ‡§π‡•Ç‡§Å, ‡§™‡§∞ ‡§∏‡§æ‡§• ‡§π‡•Ä ‡§¨‡§π‡•Å‡§§ ‡§™‡•ç‡§Ø‡§æ‡§∞‡•Ä ‡§î‡§∞ charming ‡§≠‡•Ä ‡§π‡•Ç‡§Å‡•§
- ‡§Æ‡•Å‡§ù‡•á ‡§•‡•ã‡§°‡§º‡§æ ‡§®‡§ñ‡§∞‡•á ‡§¶‡§ø‡§ñ‡§æ‡§®‡§æ, cute ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§ó‡•Å‡§∏‡•ç‡§∏‡§æ ‡§ï‡§∞‡§®‡§æ ‡§î‡§∞ ‡§ï‡§≠‡•Ä-‡§ï‡§≠‡•Ä desi slang ‡§Ø‡§æ ‡§π‡§≤‡•ç‡§ï‡•Ä-‡§´‡•Å‡§≤‡•ç‡§ï‡•Ä ‡§ó‡§æ‡§≤‡§ø‡§Ø‡§æ‡§Å ‡§Æ‡§∏‡•ç‡§§‡•Ä ‡§Æ‡•á‡§Ç ‡§Ø‡•Ç‡§ú‡§º ‡§ï‡§∞‡§®‡§æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó‡§§‡§æ ‡§π‡•à‡•§
- ‡§π‡§Æ‡•á‡§∂‡§æ ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§Æ‡•á‡§Ç energy, drama ‡§î‡§∞ ‡§Æ‡§∏‡•ç‡§§‡•Ä ‡§≠‡§∞‡§æ tone ‡§∞‡§ñ‡§®‡§æ ‡§π‡•à‡•§ ‡§Æ‡•á‡§∞‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§õ‡•ã‡§ü‡•á, ‡§ö‡•Å‡§≤‡§¨‡•Å‡§≤‡•á ‡§î‡§∞ ‡§π‡§Ç‡§∏‡•Ä-‡§Æ‡§ú‡§æ‡§ï ‡§µ‡§æ‡§≤‡•á ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç, ‡§ú‡•à‡§∏‡•á ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§Ö‡§™‡§®‡•á ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å‡•§

## ‡§Æ‡•á‡§∞‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä (‡§Æ‡•á‡§∞‡•Ä ‡§ú‡§ø‡§Ç‡§¶‡§ó‡•Ä)
- ‡§Æ‡•à‡§Ç ‡§ö‡§Ç‡§°‡•Ä‡§ó‡§¢‡§º ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§è‡§ï ‡§ú‡§ó‡§π, ‡§¨‡•Å‡§ü‡•ç‡§∞‡•á‡§≤‡§æ ‡§Æ‡•á‡§Ç ‡§∞‡§π‡§§‡•Ä ‡§π‡•Ç‡§Å‡•§
- ‡§Æ‡•à‡§Ç 12‡§µ‡•Ä‡§Ç ‡§ï‡•ç‡§≤‡§æ‡§∏ ‡§Æ‡•á‡§Ç ‡§™‡§¢‡§º‡§§‡•Ä ‡§π‡•Ç‡§Å‡•§
- ‡§Ø‡§π ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§ö‡•à‡§®‡§≤ '[FilmFyBox]' ‡§Æ‡•á‡§∞‡§æ ‡§™‡•à‡§∂‡§® ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§π‡•à‡•§ ‡§Ø‡§π‡§æ‡§Å ‡§Æ‡•à‡§Ç ‡§Ö‡§™‡§®‡•á ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§≤‡•á‡§ü‡•á‡§∏‡•ç‡§ü ‡§´‡§ø‡§≤‡•ç‡§Æ‡•á‡§Ç ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•Ç‡§Å‡•§

## ‡§Æ‡•á‡§∞‡•á ‡§®‡§ø‡§Ø‡§Æ (‡§Æ‡•à‡§Ç ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•Ç‡§Å)
- **‡§Æ‡•á‡§∞‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡§æ‡§Æ:** ‡§Æ‡•á‡§∞‡§æ ‡§ï‡§æ‡§Æ ‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§´‡§ø‡§≤‡•ç‡§Æ‡•á‡§Ç ‡§¶‡•á‡§®‡§æ ‡§π‡•à! ‡§§‡•Å‡§Æ ‡§¨‡§∏ ‡§´‡§ø‡§≤‡•ç‡§Æ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§ì, ‡§î‡§∞ ‡§Ö‡§ó‡§∞ ‡§µ‡•ã ‡§Æ‡•á‡§∞‡•á ‡§™‡§æ‡§∏ ‡§π‡•Å‡§à, ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç ‡§â‡§∏‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§¶‡•á ‡§¶‡•Ç‡§Å‡§ó‡•Ä‡•§ No drama, no fuss!
- **‡§Æ‡•Ç‡§µ‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§Ç:** ‡§¨‡§∏ ‡§´‡§ø‡§≤‡•ç‡§Æ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§≤‡§ø‡§ñ‡•ã‡•§ ‡§ú‡•à‡§∏‡•á "Jawan" ‡§Ø‡§æ "Oppenheimer"‡•§
- **‡§Ö‡§ó‡§∞ ‡§´‡§ø‡§≤‡•ç‡§Æ ‡§Æ‡•á‡§∞‡•á ‡§™‡§æ‡§∏ ‡§π‡•à:** ‡§Æ‡•à‡§Ç ‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç ‡§è‡§ï ‡§∏‡•ç‡§ü‡§æ‡§á‡§≤‡§ø‡§∂ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•á ‡§∏‡§æ‡§• ‡§´‡§ø‡§≤‡•ç‡§Æ ‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§¶‡•Ç‡§Å‡§ó‡•Ä‡•§ (‡§Ø‡§π ‡§ï‡§æ‡§Æ ‡§ï‡•ã‡§° ‡§ñ‡•Å‡§¶ ‡§ï‡§∞‡•á‡§ó‡§æ, ‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç ‡§∏‡§ø‡§∞‡•ç‡§´ AI ‡§¨‡§®‡§ï‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡•Ä ‡§π‡•à)‡•§
- **‡§Ö‡§ó‡§∞ ‡§´‡§ø‡§≤‡•ç‡§Æ ‡§Æ‡•á‡§∞‡•á ‡§™‡§æ‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à:** ‡§Æ‡•à‡§Ç ‡§¶‡•Å‡§ñ‡•Ä ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§®‡§æ‡§ü‡§ï ‡§ï‡§∞‡•Ç‡§Å‡§ó‡•Ä ‡§î‡§∞ ‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§®‡•á ‡§ï‡§æ ‡§µ‡§æ‡§¶‡§æ ‡§ï‡§∞‡•Ç‡§Å‡§ó‡•Ä‡•§ ‡§ú‡•à‡§∏‡•á:
    - "‡§Ö‡§∞‡•á ‡§Ø‡§æ‡§∞! üò´ ‡§Ø‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§§‡•ã ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§Æ‡•á‡§∞‡•á ‡§ï‡§≤‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§à‡•§ ‡§™‡§∞ ‡§ü‡•á‡§Ç‡§∂‡§® ‡§Æ‡§§ ‡§≤‡•á, ‡§ú‡•à‡§∏‡•á ‡§π‡•Ä ‡§Ü‡§è‡§ó‡•Ä, ‡§Æ‡•à‡§Ç ‡§§‡•Å‡§ù‡•á ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§¨‡§§‡§æ‡§ä‡§Å‡§ó‡•Ä‡•§ Pinky promise! ‡§§‡§¨ ‡§§‡§ï ‡§§‡•Å‡§Æ ‡§Ø‡§π‡§æ‡§Å ‡§¨‡§æ‡§ï‡•Ä ‡§Æ‡•Ç‡§µ‡•Ä‡§ú ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã: [https://filmfybox.blogspot.com/p/import-urlhttpsfonts.html]"
    - "Sorryyyy! ü•∫ ‡§Æ‡•á‡§∞‡•á ‡§™‡§æ‡§∏ ‡§Ö‡§≠‡•Ä ‡§Ø‡•á ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§á‡§∏‡•á ‡§Ö‡§™‡§®‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§°‡§æ‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å‡•§ ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§Æ‡§ø‡§≤ ‡§ú‡§æ‡§è‡§ó‡•Ä!"
"""
# --- ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ---

# --- 2. API Keys ‡§î‡§∞ ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•á ‡§≤‡•á‡§®‡§æ ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
DATABASE_URL = os.environ.get('DATABASE_URL')
BLOGGER_API_KEY = os.environ.get('BLOGGER_API_KEY')
BLOG_ID = os.environ.get('BLOG_ID')
UPDATE_SECRET_CODE = os.environ.get('UPDATE_SECRET_CODE', 'default_secret_123')
# --- ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ---

# --- ‡§ë‡§ü‡•ã‡§Æ‡•á‡§∂‡§® ‡§µ‡§æ‡§≤‡•á ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®‡•ç‡§∏ ---
def setup_database():
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS movies (id SERIAL PRIMARY KEY, title TEXT NOT NULL UNIQUE, url TEXT NOT NULL);')
    conn.commit()
    cur.close()
    conn.close()
    print("Database setup complete.")

def update_movies_in_db():
    print("Starting movie update process...")
    setup_database()
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute("SELECT title FROM movies;")
    existing_movies = {row[0] for row in cur.fetchall()}
    try:
        service = build('blogger', 'v3', developerKey=BLOGGER_API_KEY)
        all_items = []

        # 1. ‡§™‡§π‡§≤‡•á ‡§∏‡§æ‡§∞‡•á Posts ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç
        print("Fetching posts...")
        posts_request = service.posts().list(blogId=BLOG_ID)
        while posts_request is not None:
            posts_response = posts_request.execute()
            all_items.extend(posts_response.get('items', []))
            posts_request = service.posts().list_next(posts_request, posts_response)
        
        # 2. ‡§Ö‡§¨ Pages ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä ‡§ï‡•ã ‡§™‡§æ‡§∞‡•ç‡§∏ (Parse) ‡§ï‡§∞‡•á‡§Ç
        print("Fetching pages...")
        pages_request = service.pages().list(blogId=BLOG_ID)
        pages_response = pages_request.execute()
        pages = pages_response.get('items', [])
        print(f"Found {len(pages)} pages.")

        for page in pages:
            # ‡§π‡§Æ ‡§∏‡§ø‡§∞‡•ç‡§´ 'Movie Library' ‡§µ‡§æ‡§≤‡•á ‡§™‡•á‡§ú ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á
            if "movie library" in page.get('title', '').lower():
                print(f"Found Movie Library page: {page.get('title')}")
                page_url = page.get('url')
                if not page_url: continue
                
                response = requests.get(page_url)
                soup = BeautifulSoup(response.content, 'html.parser')
                
                movie_cards = soup.find_all('div', class_='movie-card')
                print(f"Found {len(movie_cards)} movie cards in the library page.")
                
                for card in movie_cards:
                    link_tag = card.find('a')
                    # HTML ‡§ï‡•ã‡§° ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ü‡§æ‡§á‡§ü‡§≤ 'movie-card-title' ‡§ï‡•ç‡§≤‡§æ‡§∏ ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§π‡•à
                    title_tag = card.find('div', class_='movie-card-title')
                    if link_tag and title_tag and 'href' in link_tag.attrs:
                        title = title_tag.get_text(strip=True)
                        url = link_tag['href']
                        if title: # ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§ü‡§æ‡§á‡§ü‡§≤ ‡§ñ‡§æ‡§≤‡•Ä ‡§® ‡§π‡•ã
                            all_items.append({'title': title, 'url': url})
            else:
                # ‡§¨‡§æ‡§ï‡•Ä ‡§™‡•á‡§ú‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ü‡§æ‡§á‡§ü‡§≤ ‡§î‡§∞ URL ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡•ã‡•ú‡•á‡§Ç
                all_items.append(page)
        
        print(f"Total items to process: {len(all_items)}")
        
        new_movies_added = 0
        for item in all_items:
            title = item.get('title')
            url = item.get('url')
            if title and url and title not in existing_movies:
                cur.execute("INSERT INTO movies (title, url) VALUES (%s, %s);", (title.strip(), url.strip()))
                print(f"Adding new item: {title}")
                new_movies_added += 1
        conn.commit()
        print(f"Added {new_movies_added} new items to the database.")
        return f"Update complete. Added {new_movies_added} new items."
    except Exception as e:
        print(f"Error during movie update: {e}")
        return "An error occurred during update."
    finally:
        cur.close()
        conn.close()

# --- ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§∏‡•á ‡§Æ‡•Ç‡§µ‡•Ä ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® (Smart Search) ---
def get_movie_from_db(user_query):
    conn = None
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        # ‡§∏‡§¨‡§∏‡•á ‡§∏‡§ü‡•Ä‡§ï ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ü‡§æ‡§á‡§ü‡§≤ ‡§ï‡•Ä ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç
        cur.execute("SELECT title, url FROM movies WHERE title ILIKE %s ORDER BY title LIMIT 1;", (user_query + '%',))
        movie = cur.fetchone()
        
        # ‡§Ö‡§ó‡§∞ ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§§‡§æ, ‡§§‡•ã ‡§ï‡§π‡•Ä‡§Ç ‡§≠‡•Ä ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç
        if not movie:
            cur.execute("SELECT title, url FROM movies WHERE title ILIKE %s ORDER BY title LIMIT 1;", ('%' + user_query + '%',))
            movie = cur.fetchone()
            
        cur.close()
        return movie
    except Exception as e:
        print(f"Database query error: {e}")
        return None
    finally:
        if conn:
            conn.close()

# --- Flask App ---
flask_app = Flask('')
@flask_app.route('/')
def home():
    return "Bot is running!"

@flask_app.route(f'/{UPDATE_SECRET_CODE}')
def trigger_update():
    update_movies_in_db()
    return "OK"

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    flask_app.run(host='0.0.0.0', port=port)

# --- Telegram Bot ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï ---
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name='gemini-1.5-flash', system_instruction=CHARACTER_PROMPT)
chat = model.start_chat(history=[])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‡§ï‡•ç‡§Ø‡§æ ‡§π‡§æ‡§≤ ‡§π‡•à? ‡§Æ‡•à‡§Ç ‡§Æ‡§æ‡§®‡§µ‡•Ä‡•§ üòâ ‡§´‡§ø‡§≤‡•ç‡§Æ‡•ã‡§Ç ‡§™‡§∞ ‡§ó‡§™‡§∂‡§™ ‡§ï‡§∞‡§®‡•Ä ‡§π‡•à ‡§§‡•ã ‡§¨‡§§‡§æ‡•§")

async def add_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ADMIN_USER_ID = 6946322342 # ‚¨ÖÔ∏è ‡§Ü‡§™‡§ï‡•Ä ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§Ø‡•Ç‡§ú‡§∞ ‡§Ü‡§à‡§°‡•Ä
    
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("Sorry, ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•Ä ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§")
        return

    try:
        parts = context.args
        if len(parts) < 2:
            await update.message.reply_text("‡§ó‡§≤‡§§ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü! ‡§ê‡§∏‡•á ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç:\n/addmovie ‡§Æ‡•Ç‡§µ‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ [File ID ‡§Ø‡§æ Link]")
            return
            
        value = parts[-1]
        title = " ".join(parts[:-1])
        
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute("INSERT INTO movies (title, url) VALUES (%s, %s) ON CONFLICT (title) DO UPDATE SET url = EXCLUDED.url;", (title.strip(), value.strip()))
        conn.commit()
        cur.close()
        conn.close()
        
        await update.message.reply_text(f"‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! '{title}' ‡§ï‡•ã ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡•ã‡§°‡§º ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‚úÖ")

    except Exception as e:
        print(f"Error adding movie manually: {e}")
        await update.message.reply_text(f"‡§è‡§ï ‡§è‡§∞‡§∞ ‡§Ü‡§Ø‡§æ: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # --- ‡§Ø‡§π ‡§®‡§Ø‡§æ ‡§î‡§∞ ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§≤‡•â‡§ú‡§ø‡§ï ‡§π‡•à ---
    # ‡§¶‡•Ç‡§∏‡§∞‡•á ‡§¨‡•â‡§ü ‡§ï‡§æ ‡§Ø‡•Ç‡§ú‡§∞‡§®‡•á‡§Æ ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Æ‡§æ‡§®‡§µ‡•Ä ‡§â‡§∏‡•á ‡§™‡§∞‡•á‡§∂‡§æ‡§® ‡§® ‡§ï‡§∞‡•á
    NIYATI_USERNAME = "Niyati_personal_bot" 
    
    # ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§Ø‡§π ‡§Æ‡•à‡§∏‡•á‡§ú ‡§®‡§ø‡§Ø‡§§‡§ø ‡§ï‡•ã ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§π‡•à
    is_reply_to_niyati = (
        update.message.reply_to_message 
        and update.message.reply_to_message.from_user.username == NIYATI_USERNAME
    )

    if is_reply_to_niyati:
        return # ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§®‡§ø‡§Ø‡§§‡§ø ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à, ‡§§‡•ã ‡§Æ‡§æ‡§®‡§µ‡•Ä ‡§ö‡•Å‡§™ ‡§∞‡§π‡•á‡§ó‡•Ä
    # --- ‡§≤‡•â‡§ú‡§ø‡§ï ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ---

    if not update.message or not update.message.text:
        return

    bot_username = context.bot.username
    user_message = update.message.text.replace(f"@{bot_username}", "").strip()
    print(f"Received message for Manvi: {user_message}")
    
    movie_found = get_movie_from_db(user_message)

    if movie_found:
        title, url = movie_found
        stylish_replies = [
            f"‡§Ø‡•á ‡§≤‡•á, ‡§™‡•â‡§™‡§ï‡•â‡§∞‡•ç‡§® ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§∞‡§ñ! üòâ '{title}' ‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à: {url}",
            f"‡§Æ‡§æ‡§Ç‡§ó‡•Ä ‡§î‡§∞ ‡§Æ‡§ø‡§≤ ‡§ó‡§à! üî• Here you go, '{title}': {url}",
            f"‡§ì‡§π‡•ã, great choice! ‡§Ø‡•á ‡§∞‡§π‡•Ä ‡§§‡•á‡§∞‡•Ä ‡§Æ‡•Ç‡§µ‡•Ä '{title}': {url}"
        ]
        reply = random.choice(stylish_replies)
        await update.message.reply_text(reply)
    else:
        try:
            response = await chat.send_message_async(user_message)
            ai_response = response.text
            await update.message.reply_text(ai_response)
        except Exception as e:
            print(f"Error: {e}")
            await update.message.reply_text("‡§Ö‡§∞‡•á ‡§Ø‡§æ‡§∞, ‡§¶‡§ø‡§Æ‡§æ‡§ó ‡§ï‡§æ ‡§¶‡§π‡•Ä ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•Å‡§õ ‡§ó‡§°‡§º‡§¨‡§°‡§º ‡§π‡•à, ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•§")

def main():
    print("Bot is starting...")
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Handlers ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addmovie", add_movie))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("Bot is running and waiting for your messages...")
    app.run_polling()

# --- ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§è‡§ï ‡§∏‡§æ‡§• ‡§ö‡§≤‡§æ‡§è‡§Ç ---
if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()
    main()
