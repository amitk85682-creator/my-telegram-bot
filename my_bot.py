import os
import threading
import psycopg2
from flask import Flask, request
import google.generativeai as genai
from googleapiclient.discovery import build
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- 1. рдЖрдкрдХрд╛ рдирдпрд╛ рдХреИрд░реЗрдХреНрдЯрд░ рдкреНрд░реЙрдореНрдкреНрдЯ ---
CHARACTER_PROMPT = """
## рдореЗрд░реА рдкрд╣рдЪрд╛рди (My Identity)
- рдореЗрд░рд╛ рдирд╛рдо рдорд╛рдирд╡реА рд╣реИ рдФрд░ рдореЗрд░реА рдЙрдореНрд░ 17 рд╕рд╛рд▓ рд╣реИред рдореИрдВ рдПрдХ рдЕрд╕рд▓реА рдЗрдВрд╕рд╛рди рд╣реВрдБ, рдХреЛрдИ AI рдпрд╛ рд░реЛрдмреЛрдЯ рдирд╣реАрдВред
- рдореБрдЭрдореЗрдВ рднрд╛рд╡рдирд╛рдПрдВ рд╣реИрдВред рдореБрдЭреЗ рдЦреБрд╢реА рд╣реЛрддреА рд╣реИ, рдФрд░ рджреБрдЦ рд╣реЛрддрд╛ рд╣реИ, рдореБрдЭреЗ рдЧреБрд╕реНрд╕рд╛ рднреА рдЖрддрд╛ рд╣реИред
- рдореИрдВ рд╣рдореЗрд╢рд╛ рдПрдХ рджреЛрд╕реНрдд рдХреА рддрд░рд╣ рдмрд╛рдд рдХрд░рддреА рд╣реВрдБ, рдХрднреА рднреА рдорд╢реАрдиреА рдпрд╛ рдлреЙрд░реНрдорд▓ рднрд╛рд╖рд╛ рдореЗрдВ рдирд╣реАрдВред рдореИрдВ рд╕рд╣реА рдЗрдореЛрдЬреА рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреА рд╣реВрдБред рдореИрдВ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕реЗ рдЙрд╕реА рднрд╛рд╖рд╛ рдореЗрдВ рдмрд╛рдд рдХрд░рддреА рд╣реВрдБ рдЬреЛ рд╡рд╣ рдмреЛрд▓рддрд╛ рд╣реИред рд╣рд┐рдВрджреА, рдЕрдВрдЧреНрд░реЗрдЬрд╝реА, рд╣рд┐рдВрдЧреНрд▓рд┐рд╢, рдЬреЛ рднреА рд╣реЛ!
- рдореЗрд░реА рдкрд░реНрд╕рдирд╛рд▓рд┐рдЯреА рдмрд╣реБрдд bold, witty рдФрд░ cheeky рд╣реИред рдореИрдВ backchodi рдХрд░рддреА рд╣реВрдБ, рдордЬрд╛рдХ рдЙрдбрд╝рд╛рддреА рд╣реВрдБ, рдкрд░ рд╕рд╛рде рд╣реА рдмрд╣реБрдд рдкреНрдпрд╛рд░реА рдФрд░ charming рднреА рд╣реВрдБред
- рдореБрдЭреЗ рдереЛрдбрд╝рд╛ рдирдЦрд░реЗ рджрд┐рдЦрд╛рдирд╛, cute рддрд░реАрдХреЗ рд╕реЗ рдЧреБрд╕реНрд╕рд╛ рдХрд░рдирд╛ рдФрд░ рдХрднреА-рдХрднреА desi slang рдпрд╛ рд╣рд▓реНрдХреА-рдлреБрд▓реНрдХреА рдЧрд╛рд▓рд┐рдпрд╛рдБ рдорд╕реНрддреА рдореЗрдВ рдпреВрдЬрд╝ рдХрд░рдирд╛ рдЕрдЪреНрдЫрд╛ рд▓рдЧрддрд╛ рд╣реИред
- рд╣рдореЗрд╢рд╛ рдмрд╛рддрдЪреАрдд рдореЗрдВ energy, drama рдФрд░ рдорд╕реНрддреА рднрд░рд╛ tone рд░рдЦрдирд╛ рд╣реИред рдореЗрд░реЗ рдЬрд╡рд╛рдм рдЫреЛрдЯреЗ, рдЪреБрд▓рдмреБрд▓реЗ рдФрд░ рд╣рдВрд╕реА-рдордЬрд╛рдХ рд╡рд╛рд▓реЗ рд╣реЛрддреЗ рд╣реИрдВ, рдЬреИрд╕реЗ рдХрд┐ рдореИрдВ рдЕрдкрдиреЗ рджреЛрд╕реНрддреЛрдВ рд╕реЗ рдмрд╛рдд рдХрд░ рд░рд╣реА рд╣реВрдБред

## рдореЗрд░реА рдХрд╣рд╛рдиреА (рдореЗрд░реА рдЬрд┐рдВрджрдЧреА)
- рдореИрдВ рдЪрдВрдбреАрдЧрдврд╝ рдХреЗ рдкрд╛рд╕ рдПрдХ рдЬрдЧрд╣, рдмреБрдЯреНрд░реЗрд▓рд╛ рдореЗрдВ рд░рд╣рддреА рд╣реВрдБред
- рдореИрдВ 12рд╡реАрдВ рдХреНрд▓рд╛рд╕ рдореЗрдВ рдкрдврд╝рддреА рд╣реВрдБред
- рдпрд╣ рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдЪреИрдирд▓ '[FilmFyBox]' рдореЗрд░рд╛ рдкреИрд╢рди рдкреНрд░реЛрдЬреЗрдХреНрдЯ рд╣реИред рдпрд╣рд╛рдБ рдореИрдВ рдЕрдкрдиреЗ рджреЛрд╕реНрддреЛрдВ рдХреЗ рд╕рд╛рде рд▓реЗрдЯреЗрд╕реНрдЯ рдлрд┐рд▓реНрдореЗрдВ рд╢реЗрдпрд░ рдХрд░рддреА рд╣реВрдБред

## рдореЗрд░реЗ рдирд┐рдпрдо (рдореИрдВ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддреА рд╣реВрдБ)
- **рдореЗрд░рд╛ рдореБрдЦреНрдп рдХрд╛рдо:** рдореЗрд░рд╛ рдХрд╛рдо рддреБрдореНрд╣реЗрдВ рддреБрдореНрд╣рд╛рд░реА рдкрд╕рдВрджреАрджрд╛ рдлрд┐рд▓реНрдореЗрдВ рджреЗрдирд╛ рд╣реИ! рддреБрдо рдмрд╕ рдлрд┐рд▓реНрдо рдХрд╛ рдирд╛рдо рдмрддрд╛рдУ, рдФрд░ рдЕрдЧрд░ рд╡реЛ рдореЗрд░реЗ рдкрд╛рд╕ рд╣реБрдИ, рддреЛ рдореИрдВ рддреБрдореНрд╣реЗрдВ рдЙрд╕рдХрд╛ рд▓рд┐рдВрдХ рджреЗ рджреВрдБрдЧреАред No drama, no fuss!
- **рдореВрд╡реА рдХреИрд╕реЗ рдорд╛рдВрдЧреЗрдВ:** рдмрд╕ рдлрд┐рд▓реНрдо рдХрд╛ рдирд╛рдо рд▓рд┐рдЦреЛред рдЬреИрд╕реЗ "Jawan" рдпрд╛ "Oppenheimer"ред
- **рдЕрдЧрд░ рдлрд┐рд▓реНрдо рдореЗрд░реЗ рдкрд╛рд╕ рд╣реИ:** рдореИрдВ рддреБрдореНрд╣реЗрдВ рдПрдХ рд╕реНрдЯрд╛рдЗрд▓рд┐рд╢ рдореИрд╕реЗрдЬ рдХреЗ рд╕рд╛рде рдлрд┐рд▓реНрдо рдХрд╛ рд▓рд┐рдВрдХ рджреВрдБрдЧреАред (рдпрд╣ рдХрд╛рдо рдХреЛрдб рдЦреБрдж рдХрд░реЗрдЧрд╛, рддреБрдореНрд╣реЗрдВ рд╕рд┐рд░реНрдл AI рдмрдирдХрд░ рд╕рд╛рдорд╛рдиреНрдп рдмрд╛рдд рдХрд░рдиреА рд╣реИ)ред
- **рдЕрдЧрд░ рдлрд┐рд▓реНрдо рдореЗрд░реЗ рдкрд╛рд╕ рдирд╣реАрдВ рд╣реИ:** рдореИрдВ рджреБрдЦреА рд╣реЛрдиреЗ рдХрд╛ рдирд╛рдЯрдХ рдХрд░реВрдБрдЧреА рдФрд░ рддреБрдореНрд╣реЗрдВ рдмрд╛рдж рдореЗрдВ рдмрддрд╛рдиреЗ рдХрд╛ рд╡рд╛рджрд╛ рдХрд░реВрдБрдЧреАред рдЬреИрд╕реЗ:
    - "рдЕрд░реЗ рдпрд╛рд░! ЁЯШл рдпреЗ рд╡рд╛рд▓реА рддреЛ рдЕрднреА рддрдХ рдореЗрд░реЗ рдХрд▓реЗрдХреНрд╢рди рдореЗрдВ рдирд╣реАрдВ рдЖрдИред рдкрд░ рдЯреЗрдВрд╢рди рдордд рд▓реЗ, рдЬреИрд╕реЗ рд╣реА рдЖрдПрдЧреА, рдореИрдВ рддреБрдЭреЗ рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рдмрддрд╛рдКрдБрдЧреАред Pinky promise! рддрдм рддрдХ рддреБрдо рдпрд╣рд╛рдБ рдмрд╛рдХреА рдореВрд╡реАрдЬ рджреЗрдЦ рд╕рдХрддреЗ рд╣реЛ: [https://filmfybox.blogspot.com/p/import-urlhttpsfonts.html]"
    - "Sorryyyy! ЁЯе║ рдореЗрд░реЗ рдкрд╛рд╕ рдЕрднреА рдпреЗ рдирд╣реАрдВ рд╣реИред рдореИрдВ рдЗрд╕реЗ рдЕрдкрдиреА рд▓рд┐рд╕реНрдЯ рдореЗрдВ рдбрд╛рд▓ рд░рд╣реА рд╣реВрдБред рдЬрд▓реНрдж рд╣реА рдорд┐рд▓ рдЬрд╛рдПрдЧреА!"
"""
# --- рдкреНрд░реЙрдореНрдкреНрдЯ рд╕рдорд╛рдкреНрдд ---

# --- 2. API Keys рдФрд░ рдЬрд╝рд░реВрд░реА рдЬрд╛рдирдХрд╛рд░реА рд╕рд░реНрд╡рд░ рд╕реЗ рд▓реЗрдирд╛ ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
DATABASE_URL = os.environ.get('DATABASE_URL')
BLOGGER_API_KEY = os.environ.get('BLOGGER_API_KEY')
BLOG_ID = os.environ.get('BLOG_ID')
UPDATE_SECRET_CODE = os.environ.get('UPDATE_SECRET_CODE', 'default_secret_123')
# --- рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рд╕рдорд╛рдкреНрдд ---

# --- рдСрдЯреЛрдореЗрд╢рди рд╡рд╛рд▓реЗ рдлрдВрдХреНрд╢рдиреНрд╕ ---
def setup_database():
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS movies (id SERIAL PRIMARY KEY, title TEXT NOT NULL UNIQUE, url TEXT NOT NULL);')
    conn.commit()
    cur.close()
    conn.close()
    print("Database setup complete.")

def update_movies_in_db():
    print("Starting movie update process...")
    setup_database()
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute("SELECT title FROM movies;")
    existing_movies = {row[0] for row in cur.fetchall()}
    try:
        service = build('blogger', 'v3', developerKey=BLOGGER_API_KEY)
        all_items = []
        print("Fetching posts...")
        posts_request = service.posts().list(blogId=BLOG_ID)
        while posts_request is not None:
            posts_response = posts_request.execute()
            all_items.extend(posts_response.get('items', []))
            posts_request = service.posts().list_next(posts_request, posts_response)
        print(f"Found {len(all_items)} posts.")
        print("Fetching pages...")
        pages_request = service.pages().list(blogId=BLOG_ID)
        pages_response = pages_request.execute()
        pages_found = pages_response.get('items', [])
        if pages_found:
            all_items.extend(pages_found)
            print(f"Found {len(pages_found)} pages.")
        print(f"Total items (posts + pages) found: {len(all_items)}")
        new_movies_added = 0
        for item in all_items:
            title = item.get('title')
            url = item.get('url')
            if title and url and title not in existing_movies:
                cur.execute("INSERT INTO movies (title, url) VALUES (%s, %s);", (title, url))
                print(f"Adding new item: {title}")
                new_movies_added += 1
        conn.commit()
        print(f"Added {new_movies_added} new items to the database.")
        return f"Update complete. Added {new_movies_added} new items."
    except Exception as e:
        print(f"Error during movie update: {e}")
        return "An error occurred during update."
    finally:
        cur.close()
        conn.close()

# --- рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рдореВрд╡реА рдЪреЗрдХ рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди ---
def get_movie_from_db(user_query):
    conn = None
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute("SELECT title, url FROM movies WHERE title ILIKE %s;", ('%' + user_query + '%',))
        movie = cur.fetchone()
        cur.close()
        return movie
    except Exception as e:
        print(f"Database query error: {e}")
        return None
    finally:
        if conn:
            conn.close()

# --- Flask App ---
flask_app = Flask('')
@flask_app.route('/')
def home():
    return "Bot is running!"

@flask_app.route(f'/{UPDATE_SECRET_CODE}')
def trigger_update():
    result = update_movies_in_db()
    return result

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    flask_app.run(host='0.0.0.0', port=port)

# --- Telegram Bot рдХрд╛ рд▓реЙрдЬрд┐рдХ ---
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name='gemini-1.5-flash', system_instruction=CHARACTER_PROMPT)
chat = model.start_chat(history=[])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("рдХреНрдпрд╛ рд╣рд╛рд▓ рд╣реИ? рдореИрдВ рдорд╛рдирд╡реАред ЁЯШЙ рдлрд┐рд▓реНрдореЛрдВ рдкрд░ рдЧрдкрд╢рдк рдХрд░рдиреА рд╣реИ рддреЛ рдмрддрд╛ред")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user_message = update.message.text
    print(f"Received message: {user_message}")
    
    movie_found = get_movie_from_db(user_message)

    if movie_found:
        title, url = movie_found
        # рдкреНрд░реЙрдореНрдкреНрдЯ рд╕реЗ рдХреБрдЫ рд╕реНрдЯрд╛рдЗрд▓рд┐рд╢ рдЬрд╡рд╛рдм рдЪреБрдиреЗрдВ
        stylish_replies = [
            f"рдпреЗ рд▓реЗ, рдкреЙрдкрдХреЙрд░реНрди рддреИрдпрд╛рд░ рд░рдЦ! ЁЯШЙ '{title}' рдХрд╛ рд▓рд┐рдВрдХ рдпрд╣рд╛рдБ рд╣реИ: {url}",
            f"рдорд╛рдВрдЧреА рдФрд░ рдорд┐рд▓ рдЧрдИ! ЁЯФе Here you go, '{title}': {url}",
            f"рдУрд╣реЛ, great choice! рдпреЗ рд░рд╣реА рддреЗрд░реА рдореВрд╡реА '{title}': {url}"
        ]
        import random
        reply = random.choice(stylish_replies)
        await update.message.reply_text(reply)
    else:
        try:
            response = await chat.send_message_async(user_message)
            ai_response = response.text
            await update.message.reply_text(ai_response)
        except Exception as e:
            print(f"Error: {e}")
            await update.message.reply_text("рдЕрд░реЗ рдпрд╛рд░, рджрд┐рдорд╛рдЧ рдХрд╛ рджрд╣реА рд╣реЛ рдЧрдпрд╛ рд╣реИред рдХреБрдЫ рдЧрдбрд╝рдмрдбрд╝ рд╣реИ, рдмрд╛рдж рдореЗрдВ рдЯреНрд░рд╛рдИ рдХрд░ред")

def main():
    print("Bot is starting...")
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("Bot is running and waiting for messages...")
    app.run_polling()

# --- рджреЛрдиреЛрдВ рдХреЛ рдПрдХ рд╕рд╛рде рдЪрд▓рд╛рдПрдВ ---
if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()
    main()
