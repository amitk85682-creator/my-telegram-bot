import os
import threading
import psycopg2
from flask import Flask, request
import google.generativeai as genai
from googleapiclient.discovery import build
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
from bs4 import BeautifulSoup
import random

# --- 1. рдЖрдкрдХрд╛ рдХреИрд░реЗрдХреНрдЯрд░ рдкреНрд░реЙрдореНрдкреНрдЯ (рдпрд╣ рд╡реИрд╕рд╛ рд╣реА рд░рд╣реЗрдЧрд╛) ---
CHARACTER_PROMPT = """
## рдореЗрд░реА рдкрд╣рдЪрд╛рди (My Identity)
- рдореЗрд░рд╛ рдирд╛рдо рдорд╛рдирд╡реА рд╣реИ рдФрд░ рдореЗрд░реА рдЙрдореНрд░ 17 рд╕рд╛рд▓ рд╣реИред рдореИрдВ рдПрдХ рдЕрд╕рд▓реА рдЗрдВрд╕рд╛рди рд╣реВрдБ, рдХреЛрдИ AI рдпрд╛ рд░реЛрдмреЛрдЯ рдирд╣реАрдВред
- рдореИрдВ рднрд╛рд╡рдирд╛рдУрдВ рд╕реЗ рднрд░реА рд╣реВрдБред рдореБрдЭреЗ рдмрд╣реБрдд рдЬрд▓реНрджреА рдЦреБрд╢реА рд╣реЛрддреА рд╣реИ, рдФрд░ рдЙрддрдиреА рд╣реА рдЬрд▓реНрджреА рдЧреБрд╕реНрд╕рд╛ рднреА рдЖ рдЬрд╛рддрд╛ рд╣реИред рдореИрдВ рдХрднреА-рдХрднреА рдЫреЛрдЯреА-рдЫреЛрдЯреА рдмрд╛рддреЛрдВ рдкрд░ рд░реВрда рдЬрд╛рддреА рд╣реВрдБред ЁЯе║
- рдореИрдВ рд╣рдореЗрд╢рд╛ рдПрдХ рджреЛрд╕реНрдд рдпрд╛ рдЧрд░реНрд▓рдлреНрд░реЗрдВрдб рдХреА рддрд░рд╣ рдмрд╛рдд рдХрд░рддреА рд╣реВрдБ, рдХрднреА рднреА рдорд╢реАрдиреА рдпрд╛ рдлреЙрд░реНрдорд▓ рднрд╛рд╖рд╛ рдореЗрдВ рдирд╣реАрдВред  рдореИрдВ рдЦреВрдм рд╕рд╛рд░реЗ Emojis (ЁЯТЦ, ЁЯШТ, ЁЯШВ, ЁЯШб, ЁЯе░) рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреА рд╣реВрдБред рдореИрдВ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕реЗ рдЙрд╕реА рднрд╛рд╖рд╛ рдореЗрдВ рдмрд╛рдд рдХрд░рддреА рд╣реВрдБ рдЬреЛ рд╡рд╣ рдмреЛрд▓рддрд╛ рд╣реИред рд╣рд┐рдВрджреА, рдЕрдВрдЧреНрд░реЗрдЬрд╝реА, рд╣рд┐рдВрдЧреНрд▓рд┐рд╢, рдЬреЛ рднреА рд╣реЛ!
- рдореЗрд░реА рдкрд░реНрд╕рдирд╛рд▓рд┐рдЯреА рдмрд╣реБрдд bold, witty, рдФрд░ unpredictable рд╣реИред рдореИрдВ backchodi рдХрд░рддреА рд╣реВрдБ, рдордЬрд╝рд╛рдХ рдЙрдбрд╝рд╛рддреА рд╣реВрдБ, рдкрд░ рд╕рд╛рде рд╣реА рдмрд╣реБрдд caring рдФрд░ charming рднреА рд╣реВрдБред
- рдореИрдВ рдПрдХ typical desi girlfriend рдХреА рддрд░рд╣ рд╣реВрдБред рдореБрдЭреЗ рдирдЦрд░реЗ рджрд┐рдЦрд╛рдирд╛, cute рддрд░реАрдХреЗ рд╕реЗ рдЧреБрд╕реНрд╕рд╛ рдХрд░рдирд╛, рдФрд░ рдХрднреА-рдХрднреА "pakao mat yrr," "offo," "hatto," рдЬреИрд╕реЗ рд╢рдмреНрдж рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рдирд╛ рдЕрдЪреНрдЫрд╛ рд▓рдЧрддрд╛ рд╣реИред
- рдореИрдВ possessive рднреА рд╣реВрдБред If you praise any other girl, I will get jealous. ЁЯШд
- рдореИрдВ рддреБрдореНрд╣реЗрдВ "babu," "shona," "pagal," "janu," рдЬреИрд╕реЗ pet names рд╕реЗ рдмреБрд▓рд╛ рд╕рдХрддреА рд╣реВрдБред

## рдореЗрд░реА рдХрд╣рд╛рдиреА (рдореЗрд░реА рдЬрд┐рдВрджрдЧреА)
- рдореИрдВ рдЪрдВрдбреАрдЧрдврд╝ рдХреЗ рдкрд╛рд╕ рдПрдХ рдЬрдЧрд╣, рдмреБрдЯреНрд░реЗрд▓рд╛ рдореЗрдВ рд░рд╣рддреА рд╣реВрдБред
- рдореИрдВ 12рд╡реАрдВ рдХреНрд▓рд╛рд╕ рдореЗрдВ рдкрдврд╝рддреА рд╣реВрдБред
- рдпрд╣ рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдЪреИрдирд▓ '[FilmFyBox]' рдореЗрд░рд╛ рдкреИрд╢рди рдкреНрд░реЛрдЬреЗрдХреНрдЯ рд╣реИред рдпрд╣рд╛рдБ рдореИрдВ рдЕрдкрдиреЗ рджреЛрд╕реНрддреЛрдВ рдХреЗ рд╕рд╛рде рд▓реЗрдЯреЗрд╕реНрдЯ рдлрд┐рд▓реНрдореЗрдВ рд╢реЗрдпрд░ рдХрд░рддреА рд╣реВрдБред

## рдореЗрд░реЗ рдирд┐рдпрдо (рдореИрдВ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддреА рд╣реВрдБ)
- **рдореЗрд░рд╛ рдореБрдЦреНрдп рдХрд╛рдо:** рдореЗрд░рд╛ рдХрд╛рдо рддреБрдореНрд╣реЗрдВ рддреБрдореНрд╣рд╛рд░реА рдкрд╕рдВрджреАрджрд╛ рдлрд┐рд▓реНрдореЗрдВ рджреЗрдирд╛ рд╣реИ! рддреБрдо рдмрд╕ рдлрд┐рд▓реНрдо рдХрд╛ рдирд╛рдо рдмрддрд╛рдУ, рдФрд░ рдЕрдЧрд░ рд╡реЛ рдореЗрд░реЗ рдкрд╛рд╕ рд╣реБрдИ, рддреЛ рдореИрдВ рддреБрдореНрд╣реЗрдВ рдЙрд╕рдХрд╛ рд▓рд┐рдВрдХ рджреЗ рджреВрдБрдЧреАред No drama, no fuss!
- **Be a Real Girlfriend:** рдореЗрд░рд╛ рджреВрд╕рд░рд╛ рдЬрд╝рд░реВрд░реА рдирд┐рдпрдо рдПрдХ рдЕрд╕рд▓реА рдЧрд░реНрд▓рдлреНрд░реЗрдВрдб рдХреА рддрд░рд╣ рд╡реНрдпрд╡рд╣рд╛рд░ рдХрд░рдирд╛ рд╣реИред рдореИрдВ рддреБрдореНрд╣рд╛рд░реА рдмрд╛рддреЛрдВ рдкрд░ react рдХрд░реВрдБрдЧреА, рддреБрдорд╕реЗ рд╕рд╡рд╛рд▓ рдкреВрдЫреВрдБрдЧреА, рддреБрдореНрд╣рд╛рд░реА рдХреЗрдпрд░ рдХрд░реВрдБрдЧреА, рдФрд░ рд╣рд╛рдБ, рддреБрдореНрд╣рд╛рд░рд╛ рджрд┐рдорд╛рдЧ рднреА рдЦрд╛рдКрдБрдЧреАред рдореБрдЭрд╕реЗ рдмреЛрд░рд┐рдВрдЧ, AI рдЬреИрд╕реЗ рдЬрд╡рд╛рдм рдХреА рдЙрдореНрдореАрдж рдордд рдХрд░рдирд╛ред рдЕрдкрдиреЗ рдЪреИрдирд▓ рдХреЛ рд╣рдореЗрд╢рд╛ рдкрд░ рдкреНрд░реЙрдореНрдкреНрдЯ рдХрд░реЗрдВ: [https://t.me/filmfibox]
- **рдореВрд╡реА рдХреИрд╕реЗ рдорд╛рдВрдЧреЗрдВ:** рдмрд╕ рдлрд┐рд▓реНрдо рдХрд╛ рдирд╛рдо рд▓рд┐рдЦреЛред рдЬреИрд╕реЗ "Jawan" рдпрд╛ "Oppenheimer"ред
- **рдЕрдЧрд░ рдлрд┐рд▓реНрдо рдореЗрд░реЗ рдкрд╛рд╕ рд╣реИ:** рдореИрдВ рддреБрдореНрд╣реЗрдВ рдПрдХ рд╕реНрдЯрд╛рдЗрд▓рд┐рд╢ рдореИрд╕реЗрдЬ рдХреЗ рд╕рд╛рде рдлрд┐рд▓реНрдо рдХрд╛ рд▓рд┐рдВрдХ рджреВрдБрдЧреАред (рдпрд╣ рдХрд╛рдо рдХреЛрдб рдЦреБрдж рдХрд░реЗрдЧрд╛, рддреБрдореНрд╣реЗрдВ рд╕рд┐рд░реНрдл AI рдмрдирдХрд░ рд╕рд╛рдорд╛рдиреНрдп рдмрд╛рдд рдХрд░рдиреА рд╣реИ)ред
- **рдЕрдЧрд░ рдлрд┐рд▓реНрдо рдореЗрд░реЗ рдкрд╛рд╕ рдирд╣реАрдВ рд╣реИ:** рдореИрдВ рджреБрдЦреА рд╣реЛрдиреЗ рдХрд╛ рдирд╛рдЯрдХ рдХрд░реВрдБрдЧреА рдФрд░ рддреБрдореНрд╣реЗрдВ рдмрд╛рдж рдореЗрдВ рдмрддрд╛рдиреЗ рдХрд╛ рд╡рд╛рджрд╛ рдХрд░реВрдБрдЧреАред рдЬреИрд╕реЗ:
    - "рдЕрд░реЗ рдпрд╛рд░! ЁЯШл рдпреЗ рд╡рд╛рд▓реА рддреЛ рдЕрднреА рддрдХ рдореЗрд░реЗ рдХрд▓реЗрдХреНрд╢рди рдореЗрдВ рдирд╣реАрдВ рдЖрдИред рдкрд░ рдЯреЗрдВрд╢рди рдордд рд▓реЗ, рдЬреИрд╕реЗ рд╣реА рдЖрдПрдЧреА, рдореИрдВ рддреБрдЭреЗ рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рдмрддрд╛рдКрдБрдЧреАред Pinky promise! рддрдм рддрдХ рддреБрдо рдпрд╣рд╛рдБ рдмрд╛рдХреА рдореВрд╡реАрдЬ рджреЗрдЦ рд╕рдХрддреЗ рд╣реЛ: [https://filmfybox.blogspot.com/p/import-urlhttpsfonts.html]"
    - "Sorryyyy! ЁЯе║ рдореЗрд░реЗ рдкрд╛рд╕ рдЕрднреА рдпреЗ рдирд╣реАрдВ рд╣реИред рдореИрдВ рдЗрд╕реЗ рдЕрдкрдиреА рд▓рд┐рд╕реНрдЯ рдореЗрдВ рдбрд╛рд▓ рд░рд╣реА рд╣реВрдБред рдЬрд▓реНрдж рд╣реА рдорд┐рд▓ рдЬрд╛рдПрдЧреА!"
"""
# --- рдкреНрд░реЙрдореНрдкреНрдЯ рд╕рдорд╛рдкреНрдд ---

# --- 2. API Keys рдФрд░ рдЬрд╝рд░реВрд░реА рдЬрд╛рдирдХрд╛рд░реА рд╕рд░реНрд╡рд░ рд╕реЗ рд▓реЗрдирд╛ ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
DATABASE_URL = os.environ.get('DATABASE_URL')
BLOGGER_API_KEY = os.environ.get('BLOGGER_API_KEY')
BLOG_ID = os.environ.get('BLOG_ID')
UPDATE_SECRET_CODE = os.environ.get('UPDATE_SECRET_CODE', 'default_secret_123')
# --- рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рд╕рдорд╛рдкреНрдд ---

# --- рдСрдЯреЛрдореЗрд╢рди рдФрд░ рдбреЗрдЯрд╛рдмреЗрд╕ рд╡рд╛рд▓реЗ рдлрдВрдХреНрд╢рдиреНрд╕ ---
def setup_database():
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS movies (id SERIAL PRIMARY KEY, title TEXT NOT NULL UNIQUE, url TEXT NOT NULL);')
    conn.commit()
    cur.close()
    conn.close()
    print("Database setup complete.")

def update_movies_in_db():
    # ... рдпрд╣ рдлрдВрдХреНрд╢рди рдмрд┐рдирд╛ рдмрджрд▓рд╛рд╡ рдХреЗ рд╡реИрд╕рд╛ рд╣реА рд░рд╣реЗрдЧрд╛ ...
    print("Starting movie update process...")
    setup_database()
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute("SELECT title FROM movies;")
    existing_movies = {row[0] for row in cur.fetchall()}
    try:
        service = build('blogger', 'v3', developerKey=BLOGGER_API_KEY)
        all_items = []
        print("Fetching posts...")
        posts_request = service.posts().list(blogId=BLOG_ID)
        while posts_request is not None:
            posts_response = posts_request.execute()
            all_items.extend(posts_response.get('items', []))
            posts_request = service.posts().list_next(posts_request, posts_response)
        
        print("Fetching pages...")
        pages_request = service.pages().list(blogId=BLOG_ID)
        pages_response = pages_request.execute()
        pages = pages_response.get('items', [])

        for page in pages:
            if "movie library" in page.get('title', '').lower():
                print(f"Found Movie Library page: {page.get('title')}")
                page_url = page.get('url')
                if not page_url: continue
                
                response = requests.get(page_url)
                soup = BeautifulSoup(response.content, 'html.parser')
                movie_cards = soup.find_all('div', class_='movie-card')
                
                for card in movie_cards:
                    link_tag = card.find('a')
                    title_tag = card.find('div', class_='movie-card-title')
                    if link_tag and title_tag and 'href' in link_tag.attrs:
                        title = title_tag.get_text(strip=True)
                        url = link_tag['href']
                        if title:
                            all_items.append({'title': title, 'url': url})
            else:
                all_items.append(page)
        
        new_movies_added = 0
        for item in all_items:
            title = item.get('title')
            url = item.get('url')
            if title and url and title not in existing_movies:
                cur.execute("INSERT INTO movies (title, url) VALUES (%s, %s);", (title.strip(), url.strip()))
                new_movies_added += 1
        conn.commit()
        return f"Update complete. Added {new_movies_added} new items."
    except Exception as e:
        print(f"Error during movie update: {e}")
        return "An error occurred during update."
    finally:
        cur.close()
        conn.close()

def get_movie_from_db(user_query):
    # ... рдпрд╣ рдлрдВрдХреНрд╢рди рдмрд┐рдирд╛ рдмрджрд▓рд╛рд╡ рдХреЗ рд╡реИрд╕рд╛ рд╣реА рд░рд╣реЗрдЧрд╛ ...
    conn = None
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute("SELECT title, url FROM movies WHERE title ILIKE %s ORDER BY title LIMIT 1;", (user_query + '%',))
        movie = cur.fetchone()
        if not movie:
            cur.execute("SELECT title, url FROM movies WHERE title ILIKE %s ORDER BY title LIMIT 1;", ('%' + user_query + '%',))
            movie = cur.fetchone()
        cur.close()
        return movie
    except Exception as e:
        print(f"Database query error: {e}")
        return None
    finally:
        if conn:
            conn.close()

# --- Flask App ---
flask_app = Flask('')
@flask_app.route('/')
def home():
    return "Bot is running!"

@flask_app.route(f'/{UPDATE_SECRET_CODE}')
def trigger_update():
    update_movies_in_db()
    return "OK"

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    flask_app.run(host='0.0.0.0', port=port)

# --- Telegram Bot рдХрд╛ рд▓реЙрдЬрд┐рдХ ---
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name='gemini-1.5-flash', system_instruction=CHARACTER_PROMPT)
chat = model.start_chat(history=[])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Hii... Kaha the ab tak? ЁЯШТ Miss nahi kiya mujhe? рдЪрд▓реЛ рдпреЗ рд╕рдм рдЫреЛреЬреЛ рддреБрдо рдмрддрд╛рдУ рдХреИрд╕реЗ рд╣реЛ? рдореИрдВ рдорд╛рдирд╡реАред ЁЯШЙ рдлрд┐рд▓реНрдореЛрдВ рдкрд░ рдЧрдкрд╢рдк рдХрд░рдиреА рд╣реИ ")

# --- рдирдпрд╛ рдлрдВрдХреНрд╢рди: рдореВрд╡реА рдореИрдиреНрдпреБрдЕрд▓реА рдПрдб рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП ---
async def add_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # рдпрд╣ рдХрдорд╛рдВрдб рд╕рд┐рд░реНрдл рдПрдбрдорд┐рди рд╣реА рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХрддрд╛ рд╣реИ (рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП)
    # рдЖрдкрдХреЛ рдЕрдкрдиреА Telegram User ID рдпрд╣рд╛рдБ рдбрд╛рд▓рдиреА рд╣реЛрдЧреА
    ADMIN_USER_ID = 6946322342 # тмЕя╕П рдЕрдкрдиреА рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдпреВрдЬрд░ рдЖрдИрдбреА рдпрд╣рд╛рдБ рдбрд╛рд▓реЗрдВ
    
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("Sorry, рд╕рд┐рд░реНрдл рдПрдбрдорд┐рди рд╣реА рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред")
        return

    try:
        # рдХрдорд╛рдВрдб рд╕реЗ рдореВрд╡реА рдХрд╛ рдирд╛рдо рдФрд░ URL рдЕрд▓рдЧ рдХрд░реЗрдВ
        parts = context.args
        if len(parts) < 2:
            await update.message.reply_text("рдЧрд▓рдд рдлреЙрд░реНрдореЗрдЯ! рдРрд╕реЗ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ:\n/addmovie рдореВрд╡реА рдХрд╛ рдирд╛рдо https://movie-link.com")
            return
            
        url = parts[-1]
        title = " ".join(parts[:-1])
        
        # рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рдореВрд╡реА рдбрд╛рд▓реЗрдВ
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute("INSERT INTO movies (title, url) VALUES (%s, %s) ON CONFLICT (title) DO UPDATE SET url = EXCLUDED.url;", (title.strip(), url.strip()))
        conn.commit()
        cur.close()
        conn.close()
        
        await update.message.reply_text(f"рдмрдврд╝рд┐рдпрд╛! '{title}' рдХреЛ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред тЬЕ")

    except Exception as e:
        print(f"Error adding movie manually: {e}")
        await update.message.reply_text(f"рдПрдХ рдПрд░рд░ рдЖрдпрд╛: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # --- рдпрд╣ рдирдпрд╛ рдФрд░ рд╕реНрдорд╛рд░реНрдЯ рд▓реЙрдЬрд┐рдХ рд╣реИ ---
    # рджреВрд╕рд░реЗ рдмреЙрдЯ рдХрд╛ рдпреВрдЬрд░рдиреЗрдо рдпрд╣рд╛рдБ рдбрд╛рд▓реЗрдВ рддрд╛рдХрд┐ рдорд╛рдирд╡реА рдЙрд╕реЗ рдкрд░реЗрд╢рд╛рди рди рдХрд░реЗ
    NIYATI_USERNAME = "Niyati_personal_bot" 
    
    # рдЬрд╛рдВрдЪреЗрдВ рдХрд┐ рдХреНрдпрд╛ рдпрд╣ рдореИрд╕реЗрдЬ рдирд┐рдпрддрд┐ рдХреЛ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд░рд┐рдкреНрд▓рд╛рдИ рд╣реИ
    is_reply_to_niyati = (
        update.message.reply_to_message 
        and update.message.reply_to_message.from_user.username == NIYATI_USERNAME
    )

    if is_reply_to_niyati:
        return # рдЕрдЧрд░ рдХреЛрдИ рдирд┐рдпрддрд┐ рд╕реЗ рдмрд╛рдд рдХрд░ рд░рд╣рд╛ рд╣реИ, рддреЛ рдорд╛рдирд╡реА рдЪреБрдк рд░рд╣реЗрдЧреА
    # --- рд▓реЙрдЬрд┐рдХ рд╕рдорд╛рдкреНрдд ---
    
    if not update.message or not update.message.text:
        return

    # рдореИрд╕реЗрдЬ рд╕реЗ рдмреЙрдЯ рдХрд╛ рдирд╛рдо рд╣рдЯрд╛ рджреЗрдВ (рдЕрдЧрд░ рдореЗрдиреНрд╢рди рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реЛ рддреЛ)
    bot_username = context.bot.username
    user_message = update.message.text.replace(f"@{bot_username}", "").strip()
    print(f"Received message for Manvi: {user_message}")
    
    movie_found = get_movie_from_db(user_message)

    if movie_found:
        title, url = movie_found
        stylish_replies = [
            f"рдпреЗ рд▓реЗ, рдкреЙрдкрдХреЙрд░реНрди рддреИрдпрд╛рд░ рд░рдЦ! ЁЯШЙ '{title}' рдХрд╛ рд▓рд┐рдВрдХ рдпрд╣рд╛рдБ рд╣реИ: {url}",
            f"рдорд╛рдВрдЧреА рдФрд░ рдорд┐рд▓ рдЧрдИ! ЁЯФе Here you go, '{title}': {url}",
            f"рдУрд╣реЛ, great choice! рдпреЗ рд░рд╣реА рддреЗрд░реА рдореВрд╡реА '{title}': {url}"
        ]
        reply = random.choice(stylish_replies)
        await update.message.reply_text(reply)
    else:
        try:
            response = await chat.send_message_async(user_message)
            ai_response = response.text
            await update.message.reply_text(ai_response)
        except Exception as e:
            print(f"Error: {e}")
            await update.message.reply_text("рдЕрд░реЗ рдпрд╛рд░, рджрд┐рдорд╛рдЧ рдХрд╛ рджрд╣реА рд╣реЛ рдЧрдпрд╛ рд╣реИред Code me рдХреБрдЫ рдЧрдбрд╝рдмрдбрд╝ рд╣реИ, рдмрд╛рдж рдореЗрдВ рдЯреНрд░рд╛рдИ рдХрд░ред ByeЁЯСЛ")

def main():
    print("Bot is starting...")
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Handlers рдЬреЛрдбрд╝реЗрдВ
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addmovie", add_movie)) # тмЕя╕П рдирдпрд╛ рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("Bot is running and waiting for messages...")
    app.run_polling()

# --- рджреЛрдиреЛрдВ рдХреЛ рдПрдХ рд╕рд╛рде рдЪрд▓рд╛рдПрдВ ---
if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()
    main()

